# 统一开发平台编码规范指南
统一开发平台编码规范内容只针对常规编码风格定义，其他规范自行引入项目源码下的
`style/component-code-style-for-idea.xml`文件进行约束。

## 编码规范
### 一、命名规范
1. 所有编程相关命名均不能以下划线或美元符号开始，也不能以下划线或美元符号结束。 
   标识符只能使用ASCII字母和数字，因此每个有效的标识符名称都能匹配正则表达式`\w+`。
2. 所有编程相关的命名严禁使用拼音与英文混合的方式，更不允许直接使用中文的方式。
3. 类名使用 UpperCamelCase 风格，必须遵从驼峰形式， 参数应该避免用单个字符命名，领域模型的相关命名除外。
4. 方法名、参数名、成员变量、局部变量都统一使用 lowerCamelCase 风格，必须遵从驼峰形式。
5. 常量名命名模式为CONSTANT_CASE，全部字母大写，用下划线分隔单词，力求语义表达完整清楚，不要嫌名字长。
6. 包名统一使用小写，点分隔符之间有且仅有一个自然语义的英语单词。包名统一使用单数形式，但是类名如果有复数含义，
   类名可以使用复数形式。
7. 接口类中的方法和属性不要加任何修饰符号(public 也不要加)，保持代码的简洁性，并加上有效的 javadoc 注释。
8. 枚举需要以Enum结尾，枚举成员名称需要全大写，单词间用下划线隔开。
9. 如果使用到了设计模式，必须在类名中体现出具体模式。

### 二、常量定义
1. `long`或者`Long`初始赋值时，必须使用大写的`L`，不能是小写的`l`，小写容易跟数字`1`混淆，造成误解。
2. 常量如果比较少，建议放在一个统一的类`Constant`中。如果内容比较多（超过30个），或者功能比较明确，
   不要使用一个常量类维护所有常量，应该按常量功能进行归类，分开维护。
3.  常量的复用层次有五层:跨应用共享常量、应用内共享常量、子工程内共享常量、包内共享常量、类内共享常量。
4. 严禁使用未定义业务描述的变量。
5. 如果变量值仅在一个范围内变化用`Enum`类。
6. 如果还带有名称之外的延伸属性，必须 使用`Enum`类。

### 三、格式规约
1. import导入不允许使用通配符。
2. 每个import独立成行且不能换行。
3. 大括号的使用约定。如果是大括号内为空，则简洁地写成{}即可，不需要换行;如果是非空代码块则: 
    - 左大括号前不换行。
    - 左大括号后换行。
    - 右大括号前换行。
    - 右大括号后还有 else 等代码则不换行;表示终止右大括号后必须换行。
    - 左打括号前需要加1个空格。
4. if/for/while/switch/do 等保留字与左右括号之间都必须加空格。
5. 任何运算符左右必须加一个空格。
6. 代码块缩进<span style="color:red">`4`</span>个空格，如果使用`tab`缩进，请设置成`1`个`tab`
   为<span style="color:red">`4`</span>个空格。
7. 单行字符数限制不超过`120`个。
8. 方法参数在定义和传入时，多个参数逗号后边必须加空格。

### 四、集合处理
1. `Map`的`key`(`Set`的`value`)为自定义对象时，必须重写`hashCode`和`equals`。
2. `ArrayList`的`subList`结果不可强转成`ArrayList`，否则会抛出`ClassCastException`异常:
   `java.util.RandomAccessSubList cannot be cast to java.util.ArrayList`;  
3. 泛型通配符`<? extends T>`来接收返回的数据，此写法的泛型集合不能使用`add`方法。
4. 不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator 方式，如果并发操作，需要对 Iterator 对象加锁。
5. 高度注意 Map 类集合 K/V 能不能存储 null 值的情况，如下表格:


|      集合类       | Key允许null | Value允许null |    Super    |     说明     |
| :---------------: | :---------: | :-----------: | :---------: | :----------: |
|     Hashtable     |      N      |       N       | Dictionary  |   线程安全   |
| ConcurrentHashMap |      N      |       N       | AbstractMap | 线程局部安全 |
|      TreeMap      |      N      |       Y       | AbstractMap |  线程不安全  |
|      HashMap      |      Y      |       Y       | AbstractMap |  线程不安全  |

### 五、并发处理
1. 线程资源必须通过线程池提供，不允许在应用中自行显式创建线程。
2. `SimpleDateFormat`是线程不安全的类，一般不要定义为`static`变量，如果定义为`static`，必须加锁，
   或者使用`DateUtils`工具类。
3. 高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；
   能用对象锁，就不要用类锁。
4. 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。
5. 避免`Random`实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一`seed`导致的性能下降。

### 六、注释规范
1. 类、类属性、类方法的注释必须使用`javadoc`规范，尽量使用`/**内容*/`格式。不要使用`//内容`。
2. 所有的抽象方法(包括接口中的方法)必须要用`javadoc`注释、除了返回值、参数、
   异常说明外，还必须指出该方法做什么事情，实现什么功能。
3. 所有的类都必须添加创建者信息。
4. 方法内部单行注释，在被注释语句上方另起一行，使用`//注释`。方法内部多行注释使 用`/* */注释`，
   注意与代码对齐。
5. 所有的枚举类型字段必须要有注释，说明每个数据项的用途。
6. 代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改。

#### 类注释模板
```
/**
 * <p>Title: ${NAME}</p>
 * <p>Description: 类功能描述 </p>
 * <p>Company: https://www.agree.com</p>
 * <p>Project: ${PROJECT_NAME}</p>
 * @Author: 作者名
 * @Date: ${DATE} ${TIME}
 */
```
#### 方法注释模板
```
/**
 * 添加方法注释
 *
 * @Author: 作者名
 * @date: $date$ $time$
 * @param $param$ 参数说明，必须说明参数代表的语义
 * @return: $return$ 返回值
 */
```

## 异常、日志

### 一、异常处理
1. 不要捕获`Java`类库中定义的继承自`RuntimeException`的运行时异常类， 如: `IndexOutOfBoundsException / NullPointerException`，这类异常由程序员预检查来规避， 保证程序健壮性。
2. 异常不要用来做流程控制，条件控制，因为异常处理效率比条件分支低。
3. 不允许对大段代码`try-catch`。
4. 不能在`finally`块中使用`return`，`finally`块中的`return`返回后方法结束执行，
   不会再执行`try`块中的`return`语句。
5. 捕获异常与抛异常，必须是完全匹配，或者捕获异常是抛异常的父类。

### 日志规范
1. 对`trace/debug/info`级别的日志输出，必须使用条件输出形式或者使用占位符的方式。
2. 避免重复打印日志，浪费磁盘空间。
3. 异常信息应该包括两类信息:案发现场信息和异常堆栈信息。如果不处理，那么往上抛。
